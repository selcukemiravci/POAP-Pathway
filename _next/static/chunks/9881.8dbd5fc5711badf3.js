"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9881],{29881:function(t,a,r){r.r(a),r.d(a,{Split:function(){return i}});var e=r(82001),c=r(30853),s=r(2593),n=r(64146);r(13550),r(2162),r(64063),r(62822),r(71770),r(54098);class i{static contractRoles=e.dR;get chainId(){return this._chainId}constructor(t,a,r){let c=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},s=arguments.length>4?arguments[4]:void 0,n=arguments.length>5?arguments[5]:void 0,o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:new e.dm(t,a,s,c,r);this._chainId=n,this.abi=e.e.parse(s||[]),this.contractWrapper=o,this.storage=r,this.metadata=new e.ah(this.contractWrapper,e.dS,this.storage),this.app=new e.b0(this.contractWrapper,this.metadata,this.storage),this.roles=new e.ai(this.contractWrapper,i.contractRoles),this.encoder=new e.ag(this.contractWrapper),this.estimator=new e.aQ(this.contractWrapper),this.events=new e.aR(this.contractWrapper),this.interceptor=new e.aS(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async getAllRecipients(){let t=[],a=s.O$.from(0),r=await this.contractWrapper.readContract.payeeCount();for(;a.lt(r);)try{let r=await this.contractWrapper.readContract.payee(a);t.push(await this.getRecipientSplitPercentage(r)),a=a.add(1)}catch(t){if("method"in t&&t.method.toLowerCase().includes("payee(uint256)"))break;throw t}return t}async balanceOfAllRecipients(){let t=await this.getAllRecipients(),a={};for(let r of t)a[r.address]=await this.balanceOf(r.address);return a}async balanceOfTokenAllRecipients(t){let a=await (0,e.cB)(t),r=await this.getAllRecipients(),c={};for(let t of r)c[t.address]=await this.balanceOfToken(t.address,a);return c}async balanceOf(t){let a=await (0,e.cB)(t),r=await this.contractWrapper.readContract.provider.getBalance(this.getAddress()),c=await this.contractWrapper.readContract["totalReleased()"](),s=r.add(c);return this._pendingPayment(a,s,await this.contractWrapper.readContract["released(address)"](a))}async balanceOfToken(t,a){let r=await (0,e.cB)(a),s=await (0,e.cB)(t),i=new n.CH(r,c,this.contractWrapper.getProvider()),o=await i.balanceOf(this.getAddress()),p=await this.contractWrapper.readContract["totalReleased(address)"](r),d=o.add(p),h=await this._pendingPayment(s,d,await this.contractWrapper.readContract["released(address,address)"](r,s));return await (0,e.bc)(this.contractWrapper.getProvider(),r,h)}async getRecipientSplitPercentage(t){let a=await (0,e.cB)(t),[r,c]=await Promise.all([this.contractWrapper.readContract.totalShares(),this.contractWrapper.readContract.shares(t)]);return{address:a,splitPercentage:c.mul(s.O$.from(1e7)).div(r).toNumber()/1e5}}withdraw=(0,e.dn)(async t=>e.aW.fromContractWrapper({contractWrapper:this.contractWrapper,method:"release(address)",args:[await (0,e.cB)(t)]}));withdrawToken=(0,e.dn)(async(t,a)=>e.aW.fromContractWrapper({contractWrapper:this.contractWrapper,method:"release(address,address)",args:[await (0,e.cB)(a),await (0,e.cB)(t)]}));distribute=(0,e.dn)(async()=>e.aW.fromContractWrapper({contractWrapper:this.contractWrapper,method:"distribute()",args:[]}));distributeToken=(0,e.dn)(async t=>e.aW.fromContractWrapper({contractWrapper:this.contractWrapper,method:"distribute(address)",args:[await (0,e.cB)(t)]}));async _pendingPayment(t,a,r){let c=a.mul(await this.contractWrapper.readContract.shares(await (0,e.cB)(t))),s=c.div(await this.contractWrapper.readContract.totalShares());return s.sub(r)}async prepare(t,a,r){return e.aW.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:a,overrides:r})}async call(t,a,r){return this.contractWrapper.call(t,a,r)}}}}]);